cmake_minimum_required(VERSION 3.5)
project(sicks300_2)

# Default to C++17
if(NOT CMAKE_CXX_STANDARD)
  set(CMAKE_CXX_STANDARD 17)
endif()
if(CMAKE_COMPILER_IS_GNUCXX OR CMAKE_CXX_COMPILER_ID MATCHES "Clang")
  add_compile_options(-Wall -Wextra -Wpedantic)
endif()

################################################
## Find  dependencies                         ##
################################################
## Find ament macros and libraries
find_package(ament_cmake REQUIRED)
find_package(diagnostic_msgs REQUIRED)
find_package(rclcpp_lifecycle REQUIRED)
find_package(std_msgs REQUIRED)
find_package(sensor_msgs REQUIRED)

###########
## Build ##
###########
## Specify additional locations of header files
## Your package locations should be listed before other locations
include_directories(
  include
)

add_executable(${PROJECT_NAME}
  src/common/ScannerSickS300.cpp
  src/common/SerialIO.cpp
  src/sicks300.cpp
  src/main.cpp
)
ament_target_dependencies(${PROJECT_NAME}
  rclcpp_lifecycle
  std_msgs
  sensor_msgs
  diagnostic_msgs
)

add_executable(scan_filter src/scan_filter.cpp)
ament_target_dependencies(scan_filter
  rclcpp
  sensor_msgs
)
target_link_libraries(scan_filter)

#############
## Install ##
#############
install(TARGETS ${PROJECT_NAME} scan_filter
  ARCHIVE DESTINATION lib
  LIBRARY DESTINATION lib
  RUNTIME DESTINATION lib/${PROJECT_NAME}
)

install(DIRECTORY include/${PROJECT_NAME}/
  DESTINATION include/${PROJECT_NAME}
  FILES_MATCHING PATTERN "*.hpp"
#   PATTERN ".svn" EXCLUDE
)

install(DIRECTORY launch
  DESTINATION share/${PROJECT_NAME}/
)

install(DIRECTORY params
  DESTINATION share/${PROJECT_NAME}
)

install(PROGRAMS scripts/find_minimums.py
  DESTINATION lib/${PROJECT_NAME}
)

# ###########
# Testing  ##
# ###########
if(BUILD_TESTING)
  find_package(ament_lint_auto REQUIRED)

  # the following line skips the linter which checks for copyrights
  set(ament_cmake_copyright_FOUND TRUE)
  ament_lint_auto_find_test_dependencies()
  # add_subdirectory(test)
endif()

ament_package()